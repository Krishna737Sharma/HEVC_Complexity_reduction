def hierarchical_mask_and_bias(predictions, threshold_64=0.4, threshold_32=0.4, bias_factor=0.85):
    """Apply hierarchical constraints and conservative bias to ViT predictions"""
    # Copy to avoid overwriting original
    masked = predictions.copy()
    batch_size = masked.shape[0]
    
    # Extract level outputs
    out_64 = masked[:, 0:1]  # [B, 1] - 64x64 decisions
    out_32 = masked[:, 1:5]  # [B, 4] - 32x32 decisions
    out_16 = masked[:, 5:21] # [B, 16] - 16x16 decisions
    
    # Mask 32-level decisions if 64-level doesn't split
    mask_64 = (out_64 > threshold_64).astype(np.float32)
    masked[:, 1:5] = out_32 * mask_64
    
    # Mask 16-level decisions based on 32-level decisions
    index_mapping = [[0, 1, 4, 5], [2, 3, 6, 7], [8, 9, 12, 13], [10, 11, 14, 15]]
    
    for i in range(4):
        mask_32 = (masked[:, i + 1:i + 2] > threshold_32).astype(np.float32) * mask_64
        for j in range(4):
            idx_16 = 5 + index_mapping[i][j]
            masked[:, idx_16:idx_16 + 1] = predictions[:, idx_16:idx_16 + 1] * mask_32
    
    # **SIMPLE SOLUTION: Just reduce 16x16 splits heavily in all regions**
    masked[:, 5:21] *= 0.2  # Reduce ALL 16x16 splits by 80%
    
    # Apply conservative bias to reduce excessive splitting
    biased = masked * bias_factor
    
    return biased

